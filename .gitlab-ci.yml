stages:
  - build

variables:
  DEVICE: spes
  ARCH: arm64
  KERNEL_REPO: https://github.com/MiCode/Xiaomi_Kernel_OpenSource.git
  KERNEL_BRANCH: spes-r-oss
  CLANG_VERSION: clang-r487747c
  GCC_ARM64: https://github.com/bbqlinux/arm64-gcc.git
  GCC_ARM: https://github.com/bbqlinux/arm32-gcc.git
  KSU_REPO: https://github.com/tiann/KernelSU.git
  KSU_BRANCH: main

build_kernel:
  stage: build
  image: docker:24.0.7
  services:
    - docker:24.0.7-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 0
  before_script:
    - apk add --no-cache git wget curl bc bison flex build-base zip openssl-dev python3 py3-pip ncurses-dev ncurses-terminfo ccache automake autoconf pkgconfig libtool unzip
    - pip3 install requests
  script:
    - |
      # Start Docker daemon
      dockerd > /tmp/dockerd.log 2>&1 &
      sleep 10
      docker info
    - |
      # Clone kernel source
      git clone --depth=1 -b $KERNEL_BRANCH $KERNEL_REPO kernel
      cd kernel
      git submodule update --init --recursive
    - |
      # Clone KernelSU
      cd kernel
      git clone --depth=1 -b $KSU_BRANCH $KSU_REPO KernelSU
      cd KernelSU
      echo "Applying KernelSU patch..."
      bash ./scripts/apply.sh ../
    - |
      # Setup toolchains
      mkdir -p toolchains
      cd toolchains
      git clone --depth=1 $GCC_ARM64 gcc64
      git clone --depth=1 $GCC_ARM gcc32
      wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/master/$CLANG_VERSION.tar.gz -O clang.tar.gz
      mkdir clang && tar -xzf clang.tar.gz -C clang
    - |
      # Build kernel inside Docker
      docker run --rm -v $(pwd):/workspace -w /workspace ubuntu:22.04 bash -c "
        apt-get update &&
        DEBIAN_FRONTEND=noninteractive apt-get install -y git wget curl bc bison flex build-essential zip libssl-dev python3 libncurses5-dev libncursesw5-dev &&
        cd kernel &&
        export PATH=/workspace/toolchains/gcc64/bin:/workspace/toolchains/gcc32/bin:/workspace/toolchains/clang/bin:\$PATH &&
        export ARCH=$ARCH &&
        export SUBARCH=arm64 &&
        make O=out ARCH=arm64 ${DEVICE}_defconfig &&
        make -j\$(nproc) O=out ARCH=arm64 CC=clang CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi-
      "
    - |
      # Pack AnyKernel3
      git clone https://github.com/osm0sis/AnyKernel3 AnyKernel3
      cd AnyKernel3
      rm -rf Image.gz-dtb*
      cp ../kernel/out/arch/arm64/boot/Image.gz-dtb ./Image.gz-dtb
      zip -r9 KernelSU-$DEVICE-$(date +%Y%m%d).zip *
  artifacts:
    paths:
      - AnyKernel3/*.zip
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" # Manual trigger only
