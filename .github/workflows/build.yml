name: Build KernelSU for Redmi Note 11 (spes) with Docker

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  DEVICE: spes
  ARCH: arm64
  KERNEL_REPO: https://github.com/MiCode/Xiaomi_Kernel_OpenSource.git
  KERNEL_BRANCH: spes-r-oss
  CLANG_VERSION: clang-r487747c
  GCC_ARM64: https://github.com/bbqlinux/arm64-gcc.git
  GCC_ARM: https://github.com/bbqlinux/arm32-gcc.git
  KSU_REPO: https://github.com/tiann/KernelSU.git
  KSU_BRANCH: main

jobs:
  build:
    runs-on: ubuntu-22.04
    container:
      image: ubuntu:22.04
      options: --privileged # umožní dockeru běžet v dockeru (DIND)

    steps:
      - name: Checkout workflow repo
        uses: actions/checkout@v4

      - name: Install base dependencies
        run: |
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y \
            git wget curl bc bison flex build-essential zip \
            libssl-dev python3 python3-pip \
            libncurses5-dev libncursesw5-dev \
            ccache automake autoconf pkg-config \
            libtool libstdc++6 unzip docker.io

      - name: Start Docker daemon
        run: |
          dockerd > /tmp/dockerd.log 2>&1 &
          sleep 10
          docker info

      - name: Clone kernel source
        run: |
          git clone --depth=1 -b $KERNEL_BRANCH $KERNEL_REPO kernel
          cd kernel
          git submodule update --init --recursive

      - name: Clone KernelSU
        run: |
          cd kernel
          git clone --depth=1 -b $KSU_BRANCH $KSU_REPO KernelSU
          cd KernelSU
          echo "Applying KernelSU patch..."
          bash ./scripts/apply.sh ../

      - name: Setup toolchains
        run: |
          mkdir -p toolchains
          cd toolchains
          git clone --depth=1 $GCC_ARM64 gcc64
          git clone --depth=1 $GCC_ARM gcc32
          wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/master/$CLANG_VERSION.tar.gz -O clang.tar.gz
          mkdir clang && tar -xzf clang.tar.gz -C clang

      - name: Build kernel inside Docker
        run: |
          docker run --rm -v $GITHUB_WORKSPACE:/workspace -w /workspace ubuntu:22.04 bash -c "
            apt-get update &&
            DEBIAN_FRONTEND=noninteractive apt-get install -y git wget curl bc bison flex build-essential zip libssl-dev python3 libncurses5-dev libncursesw5-dev &&
            cd kernel &&
            export PATH=/workspace/toolchains/gcc64/bin:/workspace/toolchains/gcc32/bin:/workspace/toolchains/clang/bin:\$PATH &&
            export ARCH=$ARCH &&
            export SUBARCH=arm64 &&
            make O=out ARCH=arm64 ${DEVICE}_defconfig &&
            make -j\$(nproc) O=out ARCH=arm64 CC=clang CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi-
          "

      - name: Pack AnyKernel3
        run: |
          git clone https://github.com/osm0sis/AnyKernel3 AnyKernel3
          cd AnyKernel3
          rm -rf Image.gz-dtb*
          cp ../kernel/out/arch/arm64/boot/Image.gz-dtb ./Image.gz-dtb
          zip -r9 KernelSU-$DEVICE-$(date +%Y%m%d).zip *

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: KernelSU-${{ env.DEVICE }}
          path: AnyKernel3/*.zip
